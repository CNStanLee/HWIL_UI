# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import flownavigator_pb2 as flownavigator__pb2


class FlowNavigatorServiceStub(object):
    """This service provides Application / Component Build,run  and report Status at any point of time.
    components.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getApplicationStatus = channel.unary_unary(
                '/com.xilinx.rigel.flownavigator.v2.FlowNavigatorService/getApplicationStatus',
                request_serializer=flownavigator__pb2.ApplicationStatusRequest.SerializeToString,
                response_deserializer=flownavigator__pb2.ApplicationStatusResponse.FromString,
                )
        self.getComponentStatus = channel.unary_unary(
                '/com.xilinx.rigel.flownavigator.v2.FlowNavigatorService/getComponentStatus',
                request_serializer=flownavigator__pb2.ComponentStatusRequest.SerializeToString,
                response_deserializer=flownavigator__pb2.ComponentStatusResponse.FromString,
                )


class FlowNavigatorServiceServicer(object):
    """This service provides Application / Component Build,run  and report Status at any point of time.
    components.
    """

    def getApplicationStatus(self, request, context):
        """Generate CMakeFiles for the given application and an optional component
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getComponentStatus(self, request, context):
        """Generate CMakeFiles for the given application and an optional component
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlowNavigatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getApplicationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getApplicationStatus,
                    request_deserializer=flownavigator__pb2.ApplicationStatusRequest.FromString,
                    response_serializer=flownavigator__pb2.ApplicationStatusResponse.SerializeToString,
            ),
            'getComponentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getComponentStatus,
                    request_deserializer=flownavigator__pb2.ComponentStatusRequest.FromString,
                    response_serializer=flownavigator__pb2.ComponentStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.xilinx.rigel.flownavigator.v2.FlowNavigatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FlowNavigatorService(object):
    """This service provides Application / Component Build,run  and report Status at any point of time.
    components.
    """

    @staticmethod
    def getApplicationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.xilinx.rigel.flownavigator.v2.FlowNavigatorService/getApplicationStatus',
            flownavigator__pb2.ApplicationStatusRequest.SerializeToString,
            flownavigator__pb2.ApplicationStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getComponentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.xilinx.rigel.flownavigator.v2.FlowNavigatorService/getComponentStatus',
            flownavigator__pb2.ComponentStatusRequest.SerializeToString,
            flownavigator__pb2.ComponentStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
