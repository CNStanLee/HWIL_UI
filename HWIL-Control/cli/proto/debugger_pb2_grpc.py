# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import debugger_pb2 as debugger__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


class DebuggerServiceStub(object):
    """For Debugger Integration
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setupLaunchJson = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setupLaunchJson',
                request_serializer=debugger__pb2.SetupLaunchJsonRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.setupSystemLaunchJson = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setupSystemLaunchJson',
                request_serializer=debugger__pb2.SetupSystemLaunchJsonRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.checkDebugReadiness = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/checkDebugReadiness',
                request_serializer=debugger__pb2.DebugReadinessRequest.SerializeToString,
                response_deserializer=debugger__pb2.DebugReadinessResponse.FromString,
                )
        self.connectAieSim = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/connectAieSim',
                request_serializer=debugger__pb2.ConnectAieSimRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.pipeline = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/pipeline',
                request_serializer=debugger__pb2.PipelineRequest.SerializeToString,
                response_deserializer=debugger__pb2.PipelineResponse.FromString,
                )
        self.aieSimStatistics = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/aieSimStatistics',
                request_serializer=debugger__pb2.AieSimStatisticsRequest.SerializeToString,
                response_deserializer=debugger__pb2.AieSimStatisticsResponse.FromString,
                )
        self.setupCustomLaunchJson = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setupCustomLaunchJson',
                request_serializer=debugger__pb2.SetupCustomLaunchJsonRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.listTargetConnections = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/listTargetConnections',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=debugger__pb2.TargetConnections.FromString,
                )
        self.addTargetConnection = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/addTargetConnection',
                request_serializer=debugger__pb2.TargetConnection.SerializeToString,
                response_deserializer=debugger__pb2.TargetConnectionResponse.FromString,
                )
        self.modifyTargetConnection = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/modifyTargetConnection',
                request_serializer=debugger__pb2.TargetConnection.SerializeToString,
                response_deserializer=debugger__pb2.TargetConnectionResponse.FromString,
                )
        self.removeTargetConnection = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/removeTargetConnection',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=debugger__pb2.TargetConnectionResponse.FromString,
                )
        self.listDevices = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/listDevices',
                request_serializer=debugger__pb2.TargetConnection.SerializeToString,
                response_deserializer=debugger__pb2.Cables.FromString,
                )
        self.listFrequencies = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/listFrequencies',
                request_serializer=debugger__pb2.ListFrequencyRequest.SerializeToString,
                response_deserializer=debugger__pb2.Frequencies.FromString,
                )
        self.testTargetConnection = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/testTargetConnection',
                request_serializer=debugger__pb2.TargetConnection.SerializeToString,
                response_deserializer=debugger__pb2.TargetConnectionResponse.FromString,
                )
        self.markTargetConnectionAsDefault = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/markTargetConnectionAsDefault',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.getCrossTriggerDefinition = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/getCrossTriggerDefinition',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=debugger__pb2.CrossTriggerDefinition.FromString,
                )
        self.setXsdbServerAddress = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setXsdbServerAddress',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.loadFpgaDevice = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/loadFpgaDevice',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                )
        self.programDevice = channel.unary_stream(
                '/xilinx.rigel.debugger.v1.DebuggerService/programDevice',
                request_serializer=debugger__pb2.ProgramDeviceRequest.SerializeToString,
                response_deserializer=debugger__pb2.ProgramDeviceResponse.FromString,
                )
        self.addCustomLaunch = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/addCustomLaunch',
                request_serializer=debugger__pb2.AddCustomLaunchRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.setupTargetForCustomLaunch = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setupTargetForCustomLaunch',
                request_serializer=debugger__pb2.SetupTargetForCustomLaunchRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.getProcessorListForXsa = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/getProcessorListForXsa',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=debugger__pb2.ProcessorList.FromString,
                )
        self.getSymbolFiles = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/getSymbolFiles',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=debugger__pb2.SymbolFilesList.FromString,
                )
        self.setSymbolFiles = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setSymbolFiles',
                request_serializer=debugger__pb2.SetSymbolFilesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.listProcessOnLinuxTarget = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/listProcessOnLinuxTarget',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
                response_deserializer=debugger__pb2.LinuxProcessList.FromString,
                )
        self.setupToAttachLinuxProcess = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setupToAttachLinuxProcess',
                request_serializer=debugger__pb2.LinuxProcessRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.setupToDetachLinuxProcess = channel.unary_unary(
                '/xilinx.rigel.debugger.v1.DebuggerService/setupToDetachLinuxProcess',
                request_serializer=debugger__pb2.LinuxProcessRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class DebuggerServiceServicer(object):
    """For Debugger Integration
    """

    def setupLaunchJson(self, request, context):
        """creates and/or initializes launch configuration to run aie component
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setupSystemLaunchJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkDebugReadiness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def connectAieSim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pipeline(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def aieSimStatistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setupCustomLaunchJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTargetConnections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addTargetConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyTargetConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeTargetConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listFrequencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def testTargetConnection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def markTargetConnectionAsDefault(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCrossTriggerDefinition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setXsdbServerAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadFpgaDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def programDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addCustomLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setupTargetForCustomLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProcessorListForXsa(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSymbolFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSymbolFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listProcessOnLinuxTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setupToAttachLinuxProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setupToDetachLinuxProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DebuggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setupLaunchJson': grpc.unary_unary_rpc_method_handler(
                    servicer.setupLaunchJson,
                    request_deserializer=debugger__pb2.SetupLaunchJsonRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setupSystemLaunchJson': grpc.unary_unary_rpc_method_handler(
                    servicer.setupSystemLaunchJson,
                    request_deserializer=debugger__pb2.SetupSystemLaunchJsonRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'checkDebugReadiness': grpc.unary_unary_rpc_method_handler(
                    servicer.checkDebugReadiness,
                    request_deserializer=debugger__pb2.DebugReadinessRequest.FromString,
                    response_serializer=debugger__pb2.DebugReadinessResponse.SerializeToString,
            ),
            'connectAieSim': grpc.unary_unary_rpc_method_handler(
                    servicer.connectAieSim,
                    request_deserializer=debugger__pb2.ConnectAieSimRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'pipeline': grpc.unary_unary_rpc_method_handler(
                    servicer.pipeline,
                    request_deserializer=debugger__pb2.PipelineRequest.FromString,
                    response_serializer=debugger__pb2.PipelineResponse.SerializeToString,
            ),
            'aieSimStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.aieSimStatistics,
                    request_deserializer=debugger__pb2.AieSimStatisticsRequest.FromString,
                    response_serializer=debugger__pb2.AieSimStatisticsResponse.SerializeToString,
            ),
            'setupCustomLaunchJson': grpc.unary_unary_rpc_method_handler(
                    servicer.setupCustomLaunchJson,
                    request_deserializer=debugger__pb2.SetupCustomLaunchJsonRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listTargetConnections': grpc.unary_unary_rpc_method_handler(
                    servicer.listTargetConnections,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=debugger__pb2.TargetConnections.SerializeToString,
            ),
            'addTargetConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.addTargetConnection,
                    request_deserializer=debugger__pb2.TargetConnection.FromString,
                    response_serializer=debugger__pb2.TargetConnectionResponse.SerializeToString,
            ),
            'modifyTargetConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyTargetConnection,
                    request_deserializer=debugger__pb2.TargetConnection.FromString,
                    response_serializer=debugger__pb2.TargetConnectionResponse.SerializeToString,
            ),
            'removeTargetConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.removeTargetConnection,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=debugger__pb2.TargetConnectionResponse.SerializeToString,
            ),
            'listDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.listDevices,
                    request_deserializer=debugger__pb2.TargetConnection.FromString,
                    response_serializer=debugger__pb2.Cables.SerializeToString,
            ),
            'listFrequencies': grpc.unary_unary_rpc_method_handler(
                    servicer.listFrequencies,
                    request_deserializer=debugger__pb2.ListFrequencyRequest.FromString,
                    response_serializer=debugger__pb2.Frequencies.SerializeToString,
            ),
            'testTargetConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.testTargetConnection,
                    request_deserializer=debugger__pb2.TargetConnection.FromString,
                    response_serializer=debugger__pb2.TargetConnectionResponse.SerializeToString,
            ),
            'markTargetConnectionAsDefault': grpc.unary_unary_rpc_method_handler(
                    servicer.markTargetConnectionAsDefault,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getCrossTriggerDefinition': grpc.unary_unary_rpc_method_handler(
                    servicer.getCrossTriggerDefinition,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=debugger__pb2.CrossTriggerDefinition.SerializeToString,
            ),
            'setXsdbServerAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.setXsdbServerAddress,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'loadFpgaDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.loadFpgaDevice,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            ),
            'programDevice': grpc.unary_stream_rpc_method_handler(
                    servicer.programDevice,
                    request_deserializer=debugger__pb2.ProgramDeviceRequest.FromString,
                    response_serializer=debugger__pb2.ProgramDeviceResponse.SerializeToString,
            ),
            'addCustomLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.addCustomLaunch,
                    request_deserializer=debugger__pb2.AddCustomLaunchRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setupTargetForCustomLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.setupTargetForCustomLaunch,
                    request_deserializer=debugger__pb2.SetupTargetForCustomLaunchRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'getProcessorListForXsa': grpc.unary_unary_rpc_method_handler(
                    servicer.getProcessorListForXsa,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=debugger__pb2.ProcessorList.SerializeToString,
            ),
            'getSymbolFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.getSymbolFiles,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=debugger__pb2.SymbolFilesList.SerializeToString,
            ),
            'setSymbolFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.setSymbolFiles,
                    request_deserializer=debugger__pb2.SetSymbolFilesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'listProcessOnLinuxTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.listProcessOnLinuxTarget,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
                    response_serializer=debugger__pb2.LinuxProcessList.SerializeToString,
            ),
            'setupToAttachLinuxProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.setupToAttachLinuxProcess,
                    request_deserializer=debugger__pb2.LinuxProcessRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setupToDetachLinuxProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.setupToDetachLinuxProcess,
                    request_deserializer=debugger__pb2.LinuxProcessRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xilinx.rigel.debugger.v1.DebuggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DebuggerService(object):
    """For Debugger Integration
    """

    @staticmethod
    def setupLaunchJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setupLaunchJson',
            debugger__pb2.SetupLaunchJsonRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setupSystemLaunchJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setupSystemLaunchJson',
            debugger__pb2.SetupSystemLaunchJsonRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkDebugReadiness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/checkDebugReadiness',
            debugger__pb2.DebugReadinessRequest.SerializeToString,
            debugger__pb2.DebugReadinessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def connectAieSim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/connectAieSim',
            debugger__pb2.ConnectAieSimRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pipeline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/pipeline',
            debugger__pb2.PipelineRequest.SerializeToString,
            debugger__pb2.PipelineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def aieSimStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/aieSimStatistics',
            debugger__pb2.AieSimStatisticsRequest.SerializeToString,
            debugger__pb2.AieSimStatisticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setupCustomLaunchJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setupCustomLaunchJson',
            debugger__pb2.SetupCustomLaunchJsonRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTargetConnections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/listTargetConnections',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            debugger__pb2.TargetConnections.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addTargetConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/addTargetConnection',
            debugger__pb2.TargetConnection.SerializeToString,
            debugger__pb2.TargetConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modifyTargetConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/modifyTargetConnection',
            debugger__pb2.TargetConnection.SerializeToString,
            debugger__pb2.TargetConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeTargetConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/removeTargetConnection',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            debugger__pb2.TargetConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/listDevices',
            debugger__pb2.TargetConnection.SerializeToString,
            debugger__pb2.Cables.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listFrequencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/listFrequencies',
            debugger__pb2.ListFrequencyRequest.SerializeToString,
            debugger__pb2.Frequencies.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def testTargetConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/testTargetConnection',
            debugger__pb2.TargetConnection.SerializeToString,
            debugger__pb2.TargetConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def markTargetConnectionAsDefault(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/markTargetConnectionAsDefault',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCrossTriggerDefinition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/getCrossTriggerDefinition',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            debugger__pb2.CrossTriggerDefinition.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setXsdbServerAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setXsdbServerAddress',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def loadFpgaDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/loadFpgaDevice',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            google_dot_protobuf_dot_wrappers__pb2.StringValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def programDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/programDevice',
            debugger__pb2.ProgramDeviceRequest.SerializeToString,
            debugger__pb2.ProgramDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addCustomLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/addCustomLaunch',
            debugger__pb2.AddCustomLaunchRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setupTargetForCustomLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setupTargetForCustomLaunch',
            debugger__pb2.SetupTargetForCustomLaunchRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getProcessorListForXsa(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/getProcessorListForXsa',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            debugger__pb2.ProcessorList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSymbolFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/getSymbolFiles',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            debugger__pb2.SymbolFilesList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setSymbolFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setSymbolFiles',
            debugger__pb2.SetSymbolFilesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listProcessOnLinuxTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/listProcessOnLinuxTarget',
            google_dot_protobuf_dot_wrappers__pb2.StringValue.SerializeToString,
            debugger__pb2.LinuxProcessList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setupToAttachLinuxProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setupToAttachLinuxProcess',
            debugger__pb2.LinuxProcessRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setupToDetachLinuxProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.debugger.v1.DebuggerService/setupToDetachLinuxProcess',
            debugger__pb2.LinuxProcessRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
