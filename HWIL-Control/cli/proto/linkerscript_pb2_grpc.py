# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import linkerscript_pb2 as linkerscript__pb2


class LinkerScriptStub(object):
    """API to manage memory region layout in an lscript.ld linker script
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getModel = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/getModel',
                request_serializer=linkerscript__pb2.FilePathOrContents.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )
        self.updateMemoryRegion = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/updateMemoryRegion',
                request_serializer=linkerscript__pb2.UpdateMemoryRegionRequest.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )
        self.addMemoryRegion = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/addMemoryRegion',
                request_serializer=linkerscript__pb2.AddMemoryRegionRequest.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )
        self.renameMemoryRegion = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/renameMemoryRegion',
                request_serializer=linkerscript__pb2.RenameMemoryRegionRequest.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )
        self.setStackSize = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/setStackSize',
                request_serializer=linkerscript__pb2.SetStackSizeRequest.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )
        self.setHeapSize = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/setHeapSize',
                request_serializer=linkerscript__pb2.SetHeapSizeRequest.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )
        self.updateSectionMap = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/updateSectionMap',
                request_serializer=linkerscript__pb2.UpdateSectionMapRequest.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )
        self.regenerateWithDefaults = channel.unary_unary(
                '/xilinx.rigel.linkerscript.v1.LinkerScript/regenerateWithDefaults',
                request_serializer=linkerscript__pb2.RegenerateLinkerScriptRequest.SerializeToString,
                response_deserializer=linkerscript__pb2.LinkerScriptModel.FromString,
                )


class LinkerScriptServicer(object):
    """API to manage memory region layout in an lscript.ld linker script
    """

    def getModel(self, request, context):
        """return the memory model found in an lscript.ld file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateMemoryRegion(self, request, context):
        """update the base address/size of an existing memory region
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addMemoryRegion(self, request, context):
        """add a new memory region
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def renameMemoryRegion(self, request, context):
        """rename a memory region
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setStackSize(self, request, context):
        """update the stack size in an lscript.ld file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setHeapSize(self, request, context):
        """update the heap size in an lscript.ld file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSectionMap(self, request, context):
        """update the region associated with a linker section
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def regenerateWithDefaults(self, request, context):
        """regenerate the lscript.ld file with project defaults
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LinkerScriptServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getModel': grpc.unary_unary_rpc_method_handler(
                    servicer.getModel,
                    request_deserializer=linkerscript__pb2.FilePathOrContents.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
            'updateMemoryRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.updateMemoryRegion,
                    request_deserializer=linkerscript__pb2.UpdateMemoryRegionRequest.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
            'addMemoryRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.addMemoryRegion,
                    request_deserializer=linkerscript__pb2.AddMemoryRegionRequest.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
            'renameMemoryRegion': grpc.unary_unary_rpc_method_handler(
                    servicer.renameMemoryRegion,
                    request_deserializer=linkerscript__pb2.RenameMemoryRegionRequest.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
            'setStackSize': grpc.unary_unary_rpc_method_handler(
                    servicer.setStackSize,
                    request_deserializer=linkerscript__pb2.SetStackSizeRequest.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
            'setHeapSize': grpc.unary_unary_rpc_method_handler(
                    servicer.setHeapSize,
                    request_deserializer=linkerscript__pb2.SetHeapSizeRequest.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
            'updateSectionMap': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSectionMap,
                    request_deserializer=linkerscript__pb2.UpdateSectionMapRequest.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
            'regenerateWithDefaults': grpc.unary_unary_rpc_method_handler(
                    servicer.regenerateWithDefaults,
                    request_deserializer=linkerscript__pb2.RegenerateLinkerScriptRequest.FromString,
                    response_serializer=linkerscript__pb2.LinkerScriptModel.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xilinx.rigel.linkerscript.v1.LinkerScript', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LinkerScript(object):
    """API to manage memory region layout in an lscript.ld linker script
    """

    @staticmethod
    def getModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/getModel',
            linkerscript__pb2.FilePathOrContents.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateMemoryRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/updateMemoryRegion',
            linkerscript__pb2.UpdateMemoryRegionRequest.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addMemoryRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/addMemoryRegion',
            linkerscript__pb2.AddMemoryRegionRequest.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def renameMemoryRegion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/renameMemoryRegion',
            linkerscript__pb2.RenameMemoryRegionRequest.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setStackSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/setStackSize',
            linkerscript__pb2.SetStackSizeRequest.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setHeapSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/setHeapSize',
            linkerscript__pb2.SetHeapSizeRequest.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateSectionMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/updateSectionMap',
            linkerscript__pb2.UpdateSectionMapRequest.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def regenerateWithDefaults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.linkerscript.v1.LinkerScript/regenerateWithDefaults',
            linkerscript__pb2.RegenerateLinkerScriptRequest.SerializeToString,
            linkerscript__pb2.LinkerScriptModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
