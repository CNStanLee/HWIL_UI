# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import notification_pb2 as notification__pb2


class NotificationStub(object):
    """Centralized event processing responsible for shepherding events from
    producers to consumers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/xilinx.rigel.notification.v1.Notification/Register',
                request_serializer=notification__pb2.RegisterRequest.SerializeToString,
                response_deserializer=notification__pb2.RegisterResponse.FromString,
                )
        self.Unregister = channel.unary_unary(
                '/xilinx.rigel.notification.v1.Notification/Unregister',
                request_serializer=notification__pb2.UnRegisterRequest.SerializeToString,
                response_deserializer=notification__pb2.UnRegisterResponse.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/xilinx.rigel.notification.v1.Notification/Subscribe',
                request_serializer=notification__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=notification__pb2.RigelEvent.FromString,
                )
        self.Post = channel.stream_unary(
                '/xilinx.rigel.notification.v1.Notification/Post',
                request_serializer=notification__pb2.RigelEvent.SerializeToString,
                response_deserializer=notification__pb2.PostResponse.FromString,
                )


class NotificationServicer(object):
    """Centralized event processing responsible for shepherding events from
    producers to consumers
    """

    def Register(self, request, context):
        """Registers an event handler for a specific event.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unregister(self, request, context):
        """Unregisers an event handler for a specific event.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Subscribes an event handler to a stream for receiving events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Post(self, request_iterator, context):
        """Posts an event to a stream for all registered event handler to consume.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=notification__pb2.RegisterRequest.FromString,
                    response_serializer=notification__pb2.RegisterResponse.SerializeToString,
            ),
            'Unregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Unregister,
                    request_deserializer=notification__pb2.UnRegisterRequest.FromString,
                    response_serializer=notification__pb2.UnRegisterResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=notification__pb2.SubscribeRequest.FromString,
                    response_serializer=notification__pb2.RigelEvent.SerializeToString,
            ),
            'Post': grpc.stream_unary_rpc_method_handler(
                    servicer.Post,
                    request_deserializer=notification__pb2.RigelEvent.FromString,
                    response_serializer=notification__pb2.PostResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xilinx.rigel.notification.v1.Notification', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Notification(object):
    """Centralized event processing responsible for shepherding events from
    producers to consumers
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.notification.v1.Notification/Register',
            notification__pb2.RegisterRequest.SerializeToString,
            notification__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.notification.v1.Notification/Unregister',
            notification__pb2.UnRegisterRequest.SerializeToString,
            notification__pb2.UnRegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/xilinx.rigel.notification.v1.Notification/Subscribe',
            notification__pb2.SubscribeRequest.SerializeToString,
            notification__pb2.RigelEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Post(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/xilinx.rigel.notification.v1.Notification/Post',
            notification__pb2.RigelEvent.SerializeToString,
            notification__pb2.PostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
