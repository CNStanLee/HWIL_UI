# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import workspace_pb2 as workspace__pb2


class WorkspaceServiceStub(object):
    """For basic workspace handling
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetWorkspace = channel.unary_unary(
                '/xilinx.rigel.workspace.v1.WorkspaceService/SetWorkspace',
                request_serializer=workspace__pb2.Workspace.SerializeToString,
                response_deserializer=workspace__pb2.SetWorkspaceResponse.FromString,
                )
        self.ForceSetWorkspace = channel.unary_unary(
                '/xilinx.rigel.workspace.v1.WorkspaceService/ForceSetWorkspace',
                request_serializer=workspace__pb2.Workspace.SerializeToString,
                response_deserializer=workspace__pb2.SetWorkspaceResponse.FromString,
                )
        self.GetWorkspace = channel.unary_unary(
                '/xilinx.rigel.workspace.v1.WorkspaceService/GetWorkspace',
                request_serializer=workspace__pb2.GetWorkspaceRequest.SerializeToString,
                response_deserializer=workspace__pb2.Workspace.FromString,
                )
        self.checkWorkspaceSet = channel.unary_unary(
                '/xilinx.rigel.workspace.v1.WorkspaceService/checkWorkspaceSet',
                request_serializer=workspace__pb2.CheckWorkspaceRequest.SerializeToString,
                response_deserializer=workspace__pb2.CheckWorkspaceResponse.FromString,
                )


class WorkspaceServiceServicer(object):
    """For basic workspace handling
    """

    def SetWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceSetWorkspace(self, request, context):
        """sets the workspace bypassing the workspace lock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkWorkspaceSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkspaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWorkspace,
                    request_deserializer=workspace__pb2.Workspace.FromString,
                    response_serializer=workspace__pb2.SetWorkspaceResponse.SerializeToString,
            ),
            'ForceSetWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceSetWorkspace,
                    request_deserializer=workspace__pb2.Workspace.FromString,
                    response_serializer=workspace__pb2.SetWorkspaceResponse.SerializeToString,
            ),
            'GetWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkspace,
                    request_deserializer=workspace__pb2.GetWorkspaceRequest.FromString,
                    response_serializer=workspace__pb2.Workspace.SerializeToString,
            ),
            'checkWorkspaceSet': grpc.unary_unary_rpc_method_handler(
                    servicer.checkWorkspaceSet,
                    request_deserializer=workspace__pb2.CheckWorkspaceRequest.FromString,
                    response_serializer=workspace__pb2.CheckWorkspaceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xilinx.rigel.workspace.v1.WorkspaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkspaceService(object):
    """For basic workspace handling
    """

    @staticmethod
    def SetWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.workspace.v1.WorkspaceService/SetWorkspace',
            workspace__pb2.Workspace.SerializeToString,
            workspace__pb2.SetWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForceSetWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.workspace.v1.WorkspaceService/ForceSetWorkspace',
            workspace__pb2.Workspace.SerializeToString,
            workspace__pb2.SetWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.workspace.v1.WorkspaceService/GetWorkspace',
            workspace__pb2.GetWorkspaceRequest.SerializeToString,
            workspace__pb2.Workspace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkWorkspaceSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xilinx.rigel.workspace.v1.WorkspaceService/checkWorkspaceSet',
            workspace__pb2.CheckWorkspaceRequest.SerializeToString,
            workspace__pb2.CheckWorkspaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
