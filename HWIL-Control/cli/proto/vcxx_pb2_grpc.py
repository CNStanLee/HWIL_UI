# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vcxx_pb2 as vcxx__pb2


class VcxxServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.callVcxx = channel.stream_stream(
                '/com.xilinx.rigel.vcxx.v1.VcxxService/callVcxx',
                request_serializer=vcxx__pb2.CallVcxxRequest.SerializeToString,
                response_deserializer=vcxx__pb2.CallVcxxResponse.FromString,
                )
        self.hasVcxx = channel.unary_unary(
                '/com.xilinx.rigel.vcxx.v1.VcxxService/hasVcxx',
                request_serializer=vcxx__pb2.HasVcxxRequest.SerializeToString,
                response_deserializer=vcxx__pb2.HasVcxxResponse.FromString,
                )


class VcxxServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def callVcxx(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasVcxx(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VcxxServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'callVcxx': grpc.stream_stream_rpc_method_handler(
                    servicer.callVcxx,
                    request_deserializer=vcxx__pb2.CallVcxxRequest.FromString,
                    response_serializer=vcxx__pb2.CallVcxxResponse.SerializeToString,
            ),
            'hasVcxx': grpc.unary_unary_rpc_method_handler(
                    servicer.hasVcxx,
                    request_deserializer=vcxx__pb2.HasVcxxRequest.FromString,
                    response_serializer=vcxx__pb2.HasVcxxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.xilinx.rigel.vcxx.v1.VcxxService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VcxxService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def callVcxx(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.xilinx.rigel.vcxx.v1.VcxxService/callVcxx',
            vcxx__pb2.CallVcxxRequest.SerializeToString,
            vcxx__pb2.CallVcxxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hasVcxx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.xilinx.rigel.vcxx.v1.VcxxService/hasVcxx',
            vcxx__pb2.HasVcxxRequest.SerializeToString,
            vcxx__pb2.HasVcxxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
